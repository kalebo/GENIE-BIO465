colnames(gdsc.drug.cn.profile) <- headerLine
return (gdsc.drug.cn.profile)
}
#transpose the genie filtered CN df
genie.filtered.cn.t <- t(genie.filtered.cn)
#Strip first row
genie.filtered.cn.t<- as.data.frame(genie.filtered.cn.t[-1,])
# Rename Columns to be the matching genes which we know is in the same order
colnames(genie.filtered.cn.t) <- unlist(intersecting.genes)
#Make the rownames into values
genie.filtered.cn.t <- setDT(genie.filtered.cn.t,keep.rownames = TRUE)[]
# make the first column header to be SAMPLE_ID
colnames(genie.filtered.cn.t)[1] <- "SAMPLE_ID"
# Now its all READY!!!
# check makeup of the Cancer types
genie.cancer.types <- as.data.frame(summary(factor(genie.clin$CANCER_TYPE)))
genie.Ages <- as.data.frame(summary(factor(genie.clin$AGE_AT_SEQ_REPORT)))
#Use filter to manually create subtypes
filter(genie.clin,PRIMARY_RACE == "White")
filterString <- 'ETHNICITY == "Non-Spanish/non-Hispanic",PRIMARY_RACE == "White", SEX == "Male", CANCER_TYPE == "Non-Small Cell Lung Cancer"'
filterString1 <- paste('filter(genie.clin,',filterString,")")
#Example of highly specific subset
example_subset <-filter(genie.clin,eval(as.name(filterString)))
filterString <- 'ETHNICITY == "Non-Spanish/non-Hispanic", PRIMARY_RACE == "White", SEX == "Male", CANCER_TYPE == "Non-Small Cell Lung Cancer"'
filterString1 <- paste('filter(genie.clin,',filterString,")")
example_subset <-filter(genie.clin,eval(as.name(filterString)))
makeGenieSubsetProfile <- function(filterString, cnlevel){
# create entire filter command in one string
filterString1 <- paste('filter(genie.clin,',filterString,")")
# run the filter command
subsetClinical <- eval(parse(text=filterString1))
records <- filter(genie.filtered.cn.t, SAMPLE_ID %in% subsetClinical$SAMPLE_ID)
#only subsets with more than 100 samples are valid
assertthat::assert_that(length(records) >= 100)
#generate profile and return it
mkProfile(records, cnlevel)
}
mkRecordSet <- function(drug_id, threshold) {
drug.experiments <- filter(dose.response, DRUG_ID == drug_id, LN_IC50 < threshold)
records <- filter(gdsc.filtered.cn.bettertrans.df, COSMIC_ID %in% drug.experiments$COSMIC_ID)
assertthat::assert_that(length(records) >= 100)
records
}
ids <- arrange(dose.response, LN_IC50)$DRUG_ID
trt<- function(id) {which.max((mkProfile(mkRecordSet(id, 2), -2)))}
sapply(unlist(ids[1:15]), trt)
#transpose the genie filtered CN df
genie.filtered.cn.t <- t(genie.filtered.cn)
#Strip first row
genie.filtered.cn.t<- as.data.frame(genie.filtered.cn.t[-1,])
# Rename Columns to be the matching genes which we know is in the same order
colnames(genie.filtered.cn.t) <- unlist(intersecting.genes)
#Make the rownames into values
genie.filtered.cn.t <- setDT(genie.filtered.cn.t,keep.rownames = TRUE)[]
# make the first column header to be SAMPLE_ID
colnames(genie.filtered.cn.t)[1] <- "SAMPLE_ID"
# Now its all READY!!!
# check makeup of the Cancer types
genie.cancer.types <- as.data.frame(summary(factor(genie.clin$CANCER_TYPE)))
genie.Ages <- as.data.frame(summary(factor(genie.clin$AGE_AT_SEQ_REPORT)))
#Use filter to manually create subtypes
filter(genie.clin,PRIMARY_RACE == "White")
filterString <- 'ETHNICITY == "Non-Spanish/non-Hispanic",PRIMARY_RACE == "White", SEX == "Male", CANCER_TYPE == "Non-Small Cell Lung Cancer"'
filterString1 <- paste('filter(genie.clin,',filterString,")")
#Example of highly specific subset
example_subset <-filter(genie.clin,eval(as.name(filterString)))
filterString <- 'ETHNICITY == "Non-Spanish/non-Hispanic", PRIMARY_RACE == "White", SEX == "Male", CANCER_TYPE == "Non-Small Cell Lung Cancer"'
filterString1 <- paste('filter(genie.clin,',filterString,")")
example_subset <-filter(genie.clin,eval(as.name(filterString)))
test <- eval(parse(text=filterString1))
pat <- test$PATIENT_ID
numValidFilters<-0
i<-0
makeGenieSubsetProfile <- function(filterString, cnlevel){
# create entire filter command in one string
filterString1 <- paste('filter(genie.clin,',filterString,")")
# run the filter command
subsetClinical <- eval(parse(text=filterString1))
records <- filter(genie.filtered.cn.t, SAMPLE_ID %in% subsetClinical$SAMPLE_ID)
#print(records)
#only subsets with more than 100 samples are valid
#print("Grabbed Records")
#print(nrow(records))
if (nrow(records) < 100){
return(NA)
}
# assertthat::assert_that(nrow(records) >= 100){return NULL}
print("We have more than 100 records")
numValidFilters<-numValidFilters+1
i<-i+1
#print(numValidFilters)
#print(i)
#generate profile and return it
mkProfile(records, cnlevel)
}
genie.cancer.types <- setDT(genie.cancer.types,keep.rownames = TRUE)[]
colnames(genie.cancer.types)[2] <- "Count"
cancer_types <- filter(genie.cancer.types, Count > 500) %>% arrange(desc(Count))
cancer_types <- c(cancer_types[,1])
#cancer type detailed vector
colnames(top10detailed)[2] <- "Count"
genie.cancer.types <- setDT(genie.cancer.types,keep.rownames = TRUE)[]
colnames(genie.cancer.types)[2] <- "Count"
cancer_types <- filter(genie.cancer.types, Count > 500) %>% arrange(desc(Count))
cancer_types <- c(cancer_types[,1])
colnames(top10detailed)[2] <- "Count"
colnames(top10detailed)[1] <- "CANCER_TYPE_DETAILED"
filterStrings <- data.frame(ID= c(1:10000),
FilterString = c(""))
generateFilters <- function(cancers=NA, cancer_subtypes=NA, sexes=NA, races=NA, ages= NA){
results <- c()
#sapply(cancers,singleFilterSet)
results <- append(results,as.character(sapply(cancers,singleFilterSet)))
if (!is.na(cancers)){
for (cancer in cancers){
for (sex in sexes){
results <- append(results,singleFilterSet(cancer,sex=sex))
}
}
}
if (!is.na(races)){
for (cancer in cancers){
for (race in races){
results <- append(results,singleFilterSet(cancer,race = race))
}
}
}
if (!is.na(cancer_subtypes)){
for (cancer in cancers){
for (cancer_subtype in cancer_subtypes){
results <- append(results,singleFilterSet(cancer,cancer_subtype = cancer_subtype))
}
}
}
if (!is.na(ages)){
for (cancer in cancers){
for (age in ages){
results <- append(results,singleFilterSet(cancer,age = age))
}
}
}
results
}
filterStrings <- as.data.frame(generateFilters(cancer_types,sexes = sexes,races = races))
genieProfiles <-data.frame()
for (filter in filterStrings$FilterString){
genieProfile<-makeGenieSubsetProfile(filter,2)
#make row
newRow <- append(genieRow,filterStrings$ID,after==0)
newRow <-as.data.frame(genieProfile)
newRow <- t(newRow)
newRow<-as.data.frame(newRow)
genieProfiles <- bind_rows(genieProfiles,newRow)
#print(i)
}
singleFilterSet <- function(cancer=NA, cancer_subtype=NA, sex=NA, race=NA, age= NA) {
result = ""
if (!is.na(cancer)) result <- paste(result, "CANCER_TYPE == '", cancer, "'", sep = "")
if (!is.na(cancer_subtype)) result <- paste(result, ", CANCER_TYPE_DETAILED == '", cancer_subtype, "'", sep = "")
if (!is.na(sex)) result <- paste(result, ", SEX == '", sex, "'", sep = "")
if (!is.na(race)) result <- paste(result, ", PRIMARY_RACE == '", race, "'", sep = "")
if (!is.na(age)) result <- paste(result, ", AGE_AT_SEQ_REPORT >= ", age[1], sep = "")
if (!is.na(age)) result <- paste(result, ", AGE_AT_SEQ_REPORT < ", age[2], sep = "")
result
}
filterStrings <- as.data.frame(generateFilters(cancer_types,sexes = sexes,races = races))
filterStrings <- data.frame(ID= c(1:10000),
FilterString = c(""))
generateFilters <- function(cancers=NA, cancer_subtypes=NA, sexes=NA, races=NA, ages= NA){
results <- c()
#sapply(cancers,singleFilterSet)
results <- append(results,as.character(sapply(cancers,singleFilterSet)))
if (!is.na(cancers)){
for (cancer in cancers){
for (sex in sexes){
results <- append(results,singleFilterSet(cancer,sex=sex))
}
}
}
if (!is.na(races)){
for (cancer in cancers){
for (race in races){
results <- append(results,singleFilterSet(cancer,race = race))
}
}
}
if (!is.na(cancer_subtypes)){
for (cancer in cancers){
for (cancer_subtype in cancer_subtypes){
results <- append(results,singleFilterSet(cancer,cancer_subtype = cancer_subtype))
}
}
}
if (!is.na(ages)){
for (cancer in cancers){
for (age in ages){
results <- append(results,singleFilterSet(cancer,age = age))
}
}
}
results
}
filterStrings <- as.data.frame(generateFilters(cancer_types,sexes = sexes,races = races))
genie.cancer.types <- setDT(genie.cancer.types,keep.rownames = TRUE)[]
colnames(genie.cancer.types)[2] <- "Count"
cancer_types <- filter(genie.cancer.types, Count > 500) %>% arrange(desc(Count))
cancer_types <- c(cancer_types[,1])
#cancer type detailed vector
colnames(top10detailed)[2] <- "Count"
#Drugs with most cell line responders.
strongestDrugs <- dose.response %>% filter(LN_IC50 < -3, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -3)) %>% arrange(desc(drugPower))
# How many entries are eliminated by filtering AUC
LN_Filtered_Count <- dose.response %>% filter(LN_IC50 < -2) %>% nrow()
LN_AUC_filtered_Count <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% nrow()
AUC_Count <- LN_Count - AUC_filtered
filter(dose.response, DRUG_ID == 1010) %>% arrange(DRUG_ID)
filter(dose.response, DRUG_ID == 1010) %>% arrange(LN_IC50)
x <- filter(dose.response, DRUG_ID == 1010) %>% arrange(LN_IC50)
View(x)
AUC_Count <- LN_Filtered_Count - LN_AUC_filtered_Count
AUC_Count
AUC_Count <- LN_Filtered_Count - LN_AUC_filtered_Count
AUC_Count
testableDrugs <- filter(strongestDrugs, drugPower > 10, drugPower < 100)
View(testableDrugs)
View(testableDrugs)
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
testableDrugs <- filter(strongestDrugs, drugPower > 10, drugPower < 100)
creamTestDrugs <- group_by(dose.response, DRUG_ID)
View(creamTestDrugs)
creamTestDrugs <- filter(dose.response, DRUG_ID %in% testableDrugs$DRUG_ID)
View(creamTestDrugs)
creamTestDrugs <- filter(dose.response, DRUG_ID %in% testableDrugs$DRUG_ID) %>% select(DRUG_ID)
creamTestDrugs <- filter(dose.response, DRUG_ID %in% testableDrugs$DRUG_ID) %>% select(DRUG_ID)
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
testableDrugs <- filter(strongestDrugs, drugPower > 10, drugPower < 100)
creamTestDrugs <- select(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID)
creamTestDrugs <- aggregate(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID)
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID)
ct <- sum(distinct(creamTestDrugs$DRUG_ID))
ct <- sum(unique(creamTestDrugs$DRUG_ID))
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID)
ct <- sum(unique(creamTestDrugs$DRUG_ID))
makeDrugCNProfileTable(c(-2,-1,1,2), testableDrugs$DRUG_ID, 5)
x <- makeDrugCNProfileTable(c(-2,-1,1,2), testableDrugs$DRUG_ID, 5)
View(x)
saveRDS(x, "Drug-Profile-Table.rds")
DrugProfileTable <- readRDS("Drug-Profile-Table.rds")
ct <- sum((creamTestDrugs$DRUG_ID))
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5)
ct <- sum(unique(creamTestDrugs$DRUG_ID))
ct <- sum(unique(creamTestDrugs$DRUG_ID))
ct <- count(unique(creamTestDrugs$DRUG_ID))
ct <- unique(creamTestDrugs$DRUG_ID)
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(reshape2)
library(magrittr)
library(readr)
library(synapseClient)
library(doParallel)
library(tidyverse)
synapseLogin()
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50))
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50))
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50)) %>% filter(DRUG_ID[10])
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50)) %>% ddply(.(id),function(x) head(x,10))
install.packages(ddply)
install.packages("ddply")
library(ddply)
library(plyr)
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50)) %>% ddply(.(id),function(x) head(x,10))
#Drugs with most cell line responders.
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
testableDrugs <- filter(strongestDrugs, drugPower > 10, drugPower < 100)
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50)) %>% ddply(.(id),function(x) head(x,10))
# How many entries are eliminated by filtering AUC
LN_Filtered_Count <- dose.response %>% filter(LN_IC50 < -2) %>% nrow()
LN_AUC_filtered_Count <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% nrow()
AUC_Count <- LN_Filtered_Count - LN_AUC_filtered_Count
AUC_Count
#filter(strongestDrugs, stronge)
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50)) %>% ddply(.(id),function(x) head(x,10))
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50))
#Drugs with most cell line responders.
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
testableDrugs <- filter(strongestDrugs, drugPower > 10, drugPower < 100)
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50))
# How many entries are eliminated by filtering AUC
LN_Filtered_Count <- dose.response %>% filter(LN_IC50 < -2) %>% nrow()
LN_AUC_filtered_Count <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% nrow()
AUC_Count <- LN_Filtered_Count - LN_AUC_filtered_Count
AUC_Count
#filter(strongestDrugs, stronge)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(reshape2)
library(magrittr)
library(readr)
library(synapseClient)
library(doParallel)
library(tidyverse)
synapseLogin()
genie.filtered.cn <- readRDS("genie-filtered-cn.rds")
gdsc.filtered.cn <- readRDS("gdsc-filtered-cn.rds")
gdsc.filtered.cn.t <- readRDS("gdsc-filtered-cn-t.rds")
DrugProfileTable <- readRDS("Drug-Profile-Table.rds")
celline.to.cosmicid <- readRDS("gdsc-cellline-to-cosmic-id.rds")
screeened.compounds <- readRDS("screened-compounds.rds")
dose.response <- readRDS("dose-response.rds")
genie.clin <- readRDS("genie-clin.rds")
intersecting.genes <- readRDS("intersecting-genes.rds")
genie.filtered.cnclin <- readRDS("genie-filtered-cn-clin.rds")
#test.count <- genie.clin %>% group_by(CANCER_TYPE_DETAILED) %>% mutate(COUNT = n())
#png(filename="tree.png",width=1024, height=600);
#treemap(test.count, index=c("CANCER_TYPE", "CANCER_TYPE_DETAILED"), vSize = "COUNT", type="index", palette= "Reds", align.labels = list(c("center", "center"), c("right", "bottom")), title="GENIE - Breakdown by cancer and cancer sub-type", fontsize.labels=c(18,10), fontsize.title = 18);
#dev.off()
gdsc.filtered.cn.t <- as.data.frame(t(gdsc.filtered.cn))[c(-2, -3, -4),]
translate <- function(quaddle) {
maxchar <- substr(quaddle, 1, 1)
max <- as.numeric(maxchar)
if (!is.na(max) && max >= 9) {
2
}
else if (!is.na(max) && max < 9) {
switch(maxchar,
"0" = -2,
"1" = -1,
"2" = 0,
"3" = 1,
"4" = 2,
"5" = 2,
"6" = 2,
"7" = 2,
"8" = 2)
}
else{
NA
}
}
gdsc.filtered.cn.trans <- apply(gdsc.filtered.cn.t, c(1,2), translate)
gdsc.efgr <- table(sapply( gdsc.filtered.cn[138, 5:ncol(gdsc.filtered.cn)],  translate))
genie.efgr <- table(unlist(genie.filtered.cn[138, 2:ncol(genie.filtered.cn) ]))
sapply(gdsc.efgr, function(x) x/ncol(gdsc.filtered.cn))
sapply(genie.efgr, function(x) x/ncol(genie.filtered.cn))
gdsc.efgr <- table(sapply( gdsc.filtered.cn[150, 5:ncol(gdsc.filtered.cn)],  translate))
genie.efgr <- table(unlist(genie.filtered.cn[150, 2:ncol(genie.filtered.cn) ]))
sapply(gdsc.efgr, function(x) x/ncol(gdsc.filtered.cn))
sapply(genie.efgr, function(x) x/ncol(genie.filtered.cn))
maxeqmin <- function(x) {
max_r <- substr(x, 1,1)
min_r <- substr(x, 3,3)
max_r == min_r
}
tout <- apply(gdsc.filtered.cn.t[2:nrow(gdsc.filtered.cn.t),], c(1,2), maxeqmin)
table(tout)
maxneandgt8 <- function(x) {
quad <- unlist(strsplit(x, ","))
max_r <- quad[1]
min_r <- quad[2]
max_i = as.numeric(max_r)
if (max_i != min_r){
max_i >= 4
}
else {
FALSE
}
}
mout <- apply(gdsc.filtered.cn.t[2:nrow(gdsc.filtered.cn.t), ], c(1,2), maxneandgt8)
table(mout)
bettertrans <- function(x){
quad <- unlist(strsplit(x, ","))
max_i <- as.numeric(quad[1])
min_i <- as.numeric(quad[2])
if (max_i == 0){
-2
}
else if (max_i == 1) {
-1
}
else if (max_i <= 3) {
0
}
else if (max_i <= 8 && min_i < 8 ) {
1
}
else {
2
}
}
gdsc.filtered.cn.bettertrans <- apply(gdsc.filtered.cn.t[2:nrow(gdsc.filtered.cn.t), ], c(1,2), bettertrans)
gdsc.cn.table <- as.data.frame(table(gdsc.filtered.cn.bettertrans))
colnames(gdsc.cn.table) <- c("cn", "freq")
wipenonextr <- function(x){
if (x != -2 || x != 2) {
0
}
else {
x
}
}
sum(genie.filtered.cn[,2:ncol(genie.filtered.cn)] == -2) +
sum(genie.filtered.cn[,2:ncol(genie.filtered.cn)] == 2)
genie.cn.table <- as.data.frame(table(unlist(genie.filtered.cn[,2:ncol(genie.filtered.cn)])))
colnames(genie.cn.table) <- c("cn", "freq")
library(scales)
ggplot(genie.cn.table[-2,]) + geom_col(aes(x = cn, y = freq), fill="#B22222") + scale_y_log10( breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) + labs(x="Discrete CN Level", y ="Count", title="GENIE Copy Number Distribution")
ggplot(gdsc.cn.table) + geom_col(aes(x = cn, y = freq), fill="#B22222") + scale_y_log10( breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) + labs(x="Discrete CN Level", y ="Count", title="Translated GDSC Copy Number Distribution")
gdsc.filtered.cn.bettertrans.df <- as.data.frame(gdsc.filtered.cn.bettertrans)
colnames(gdsc.filtered.cn.bettertrans.df) <- unlist(intersecting.genes)
library(data.table)
gdsc.filtered.cn.bettertrans.df <- setDT(gdsc.filtered.cn.bettertrans.df, keep.rownames = TRUE)[]
colnames(gdsc.filtered.cn.bettertrans.df)[1] <- "COSMIC_ID"
drug_id = 104
drug.experiments <- filter(dose.response, DRUG_ID == drug_id, LN_IC50 < -2)
profilein.2 <- filter(gdsc.filtered.cn.bettertrans.df, COSMIC_ID %in% drug.experiments$COSMIC_ID)
drug_id = 201
drug.experiments <- filter(dose.response, DRUG_ID == drug_id, LN_IC50 < -2)
profilein.1 <- filter(gdsc.filtered.cn.bettertrans.df, COSMIC_ID %in% drug.experiments$COSMIC_ID)
profile.104 <- apply(unlist(profilein.2 == 2), 2, function(x) sum(x)/length(x))
profile.201 <-  apply(unlist(profilein.1 == 2), 2, function(x) sum(x)/length(x))
dist(rbind(profile.201, profile.104), method = "euclidian")
colProp <- function(col) {sum(col)/length(col)}
mkProfile <- function(set, cnlevel) {
props <- apply(unlist(set == cnlevel), 2, colProp)
props <- props - mean(props)
props
}
profileDist <- function(p1, p2) {dist(rbind(p1, p2), method = "euclidian")}
subsetDist <- function(set_a, set_b, cnlevel) {
profileDist(mkProfile(set_a, cnlevel), mkProfile(set_b, cnlevel))
}
compareDrugs <- function(drug_id1, drug_id2, threshold, cnlevel) {
mkRecordSet <- function(drug_id, threshold) {
drug.experiments <- filter(dose.response, DRUG_ID == drug_id, LN_IC50 < threshold)
records <- filter(gdsc.filtered.cn.bettertrans.df, COSMIC_ID %in% drug.experiments$COSMIC_ID)
#assertthat::assert_that(length(records) >= 100)
records
}
subsetDist(mkRecordSet(drug_id1, threshold), mkRecordSet(drug_id2, threshold), cnlevel)
}
#Drugs with most cell line responders.
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
testableDrugs <- filter(strongestDrugs, drugPower > 10, drugPower < 100)
creamTestDrugs <- filter(dose.response, dose.response$DRUG_ID %in% testableDrugs$DRUG_ID, LN_IC50 < -2, AUC > .5) %>% arrange(DRUG_ID, desc(LN_IC50))
# How many entries are eliminated by filtering AUC
LN_Filtered_Count <- dose.response %>% filter(LN_IC50 < -2) %>% nrow()
LN_AUC_filtered_Count <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% nrow()
AUC_Count <- LN_Filtered_Count - LN_AUC_filtered_Count
AUC_Count
#filter(strongestDrugs, stronge)
# Create GDSC Drug Id CNLevel Profile Table, Parameters = cnLevels v(), drugIds v(), IC_50 threshold
makeDrugCNProfileTable <- function(cnlevels, drugIDs, threshold){
headerLine <- c("DRUG_ID", "CN_LEVEL", unlist(intersecting.genes))
gdsc.drug.cn.profile <- data.frame(matrix(ncol = length(headerLine), nrow = 0))
for(drugID in drugIDs)
{
for(copyLevel in cnlevels)
{
drug.experiments <- filter(dose.response, DRUG_ID == drug_id, LN_IC50 < threshold)
records <- filter(gdsc.filtered.cn.bettertrans.df, COSMIC_ID %in% drug.experiments$COSMIC_ID)
profile <- mkProfile(records, copyLevel)
gdsc.drug.cn.profile <- rbind(gdsc.drug.cn.profile, c(drugID, copyLevel, unlist(profile)[-1]))
}
}
colnames(gdsc.drug.cn.profile) <- headerLine
return (gdsc.drug.cn.profile)
}
makeGenieSubsetProfile <- function(filterString, cnlevel){
# create entire filter command in one string
filterString1 <- paste('filter(genie.clin,',filterString,")")
# run the filter command
subsetClinical <- eval(parse(text=filterString1))
records <- filter(genie.filtered.cn.t, SAMPLE_ID %in% subsetClinical$SAMPLE_ID)
#only subsets with more than 100 samples are valid
assertthat::assert_that(length(records) >= 100)
#generate profile and return it
mkProfile(records, cnlevel)
}
mkRecordSet <- function(drug_id, threshold) {
drug.experiments <- filter(dose.response, DRUG_ID == drug_id, LN_IC50 < threshold)
records <- filter(gdsc.filtered.cn.bettertrans.df, COSMIC_ID %in% drug.experiments$COSMIC_ID)
assertthat::assert_that(length(records) >= 100)
records
}
ids <- arrange(dose.response, LN_IC50)$DRUG_ID
trt<- function(id) {which.max((mkProfile(mkRecordSet(id, 2), -2)))}
sapply(unlist(ids[1:50]), trt)
View(creamTestDrugs)
View(dframe)
View(strongestDrugs)
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
testableDrugs <- filter(strongestDrugs, drugPower > 10, drugPower < 100)
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
getwd()
#Drugs with most cell line responders.
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(reshape2)
library(magrittr)
library(readr)
library(synapseClient)
library(doParallel)
library(tidyverse)
synapseLogin()
strongestDrugs <- dose.response %>% filter(LN_IC50 < -2, AUC > .5) %>% group_by(DRUG_ID) %>% summarise(drugPower = sum(LN_IC50 < -2)) %>% arrange(desc(drugPower))
